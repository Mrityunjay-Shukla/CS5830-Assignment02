# -*- coding: utf-8 -*-
"""Copy of FastAPI-Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ynSEQmYeeFsCaXihPylxC0u-xKo3mYYp
"""

!pip install fastapi nest-asyncio pyngrok uvicorn

import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

import tensorflow as tf
from tensorflow.keras.models import Sequential
import numpy as np
from PIL import Image
from fastapi import FastAPI, File, UploadFile
import uvicorn
from fastapi.middleware.cors import CORSMiddleware
from google.colab import files

app = FastAPI()

# Allow CORS for all origins to enable testing
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Directly specify the model path
MODEL_PATH = "latest_checkpoint.h5"

# Load the model from the given path and return a Sequential model
def load_model(path: str) -> Sequential:
    # Check if the model is found at the given path
    try:
        return tf.keras.models.load_model(path)
    except OSError:
        raise Exception('Keras model not found at the specified path, exiting...')

# Take an image serialized as an array of 784 elements and return the predicted digit as a string
def predict_digit(model: Sequential, data_point: list) -> str:
    data_point = np.array(data_point).reshape(1, 784)
    prediction = model.predict(data_point)
    digit = str(np.argmax(prediction))
    return digit

# Resize the uploaded images to 28x28 grayscale format and create a serialized array of 784 elements
def format_image(file: UploadFile):
    image = Image.open(file.file)
    image = image.convert('L')  # Convert image to grayscale
    image = image.resize((28, 28))
    data_point = list(image.getdata())
    return data_point

# Read the uploaded image bytes and create a serialized array of 784 elements. The API endpoint returns {"digit": digit} back to the client
@app.post('/predict')
async def predict(file: UploadFile = File(...)):
    # Utilize format_image within the /predict endpoint
    data_point = format_image(file)
    model = load_model(MODEL_PATH)
    digit = predict_digit(model, data_point)
    return {"digit": digit}

if __name__ == '__main__':
    import nest_asyncio
    from pyngrok import ngrok
    import uvicorn


    ngrok.kill()

    NGROK_AUTH_TOKEN="2gAq5QQAevQ37OCEKWcsoglpPwF_4MJv4m6MA9Y1roeL5hkUY"
    ngrok.set_auth_token(NGROK_AUTH_TOKEN)


    ngrok_tunnel = ngrok.connect(8000)
    print('Public URL:', ngrok_tunnel.public_url)
    nest_asyncio.apply()
    uvicorn.run(app, port=8000)

